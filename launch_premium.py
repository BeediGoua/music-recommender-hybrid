#!/usr/bin/env python3
"""
launch_premium.py - Script de Lancement Automatique de l'Application Premium

Ce script configure automatiquement et lance l'application premium avec toutes 
les fonctionnalit√©s diff√©renciantes pour un d√©ploiement portfolio parfait.
"""

import os
import sys
import subprocess
from pathlib import Path
import time

def print_header():
    """Afficher le header d'accueil"""
    print("=" * 60)
    print("üéµ MUSIC RECOMMENDER AI - PREMIUM LAUNCHER üéµ")
    print("=" * 60)
    print("Configuration automatique pour d√©ploiement portfolio")
    print("Avec Dashboard Analytics, Exploration IA, et Playlist Builder")
    print("=" * 60)
    print()

def check_requirements():
    """V√©rifier les pr√©requis"""
    print("V√©rification des pr√©requis...")
    
    # V√©rifier Python
    try:
        python_version = sys.version_info
        if python_version.major == 3 and python_version.minor >= 8:
            print(f"Python {python_version.major}.{python_version.minor} d√©tect√©")
        else:
            print(f"Python 3.8+ requis, version {python_version.major}.{python_version.minor} d√©tect√©e")
            return False
    except:
        print("Python non d√©tect√©")
        return False
    
    # V√©rifier les packages essentiels
    required_packages = ['streamlit', 'pandas', 'numpy', 'plotly']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"{package} disponible")
        except ImportError:
            print(f"{package} manquant")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nInstallation des packages manquants...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install"] + missing_packages)
            print("Packages install√©s avec succ√®s")
        except subprocess.CalledProcessError:
            print("Erreur lors de l'installation des packages")
            return False
    
    print()
    return True

def setup_environment():
    """Configurer l'environnement"""
    print("Configuration de l'environnement...")
    
    # Cr√©er les dossiers n√©cessaires
    required_dirs = [
        "data/processed",
        "outputs",
        ".streamlit"
    ]
    
    for dir_path in required_dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
        print(f"{dir_path} pr√™t")
    
    # V√©rifier les fichiers essentiels
    essential_files = [
        "data/SpotifyFeatures.csv",
        "app/streamlit_app_premium.py"
    ]
    
    missing_files = []
    for file_path in essential_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
            print(f"Fichier manquant: {file_path}")
        else:
            print(f"{file_path} trouv√©")
    
    if missing_files:
        print(f"\nFichiers manquants d√©tect√©s:")
        for file in missing_files:
            print(f"   - {file}")
        
        if "data/SpotifyFeatures.csv" in missing_files:
            print("\n Le fichier de donn√©es principal est manquant.")
            print("   L'application utilisera des donn√©es de d√©monstration.")
            input("   Appuyez sur Entr√©e pour continuer...")
    
    print()
    return True

def create_models():
    """Cr√©er les mod√®les n√©cessaires"""
    print("Cr√©ation des mod√®les IA...")
    
    # V√©rifier si les mod√®les existent d√©j√†
    model_files = [
        "data/processed/songs_metadata_clean.csv",
        "data/processed/word2vec_similarities.json", 
        "data/processed/content_embeddings.npy"
    ]
    
    models_exist = all(Path(f).exists() for f in model_files)
    
    if models_exist:
        print("Mod√®les d√©j√† cr√©√©s")
        recreate = input(" Recr√©er les mod√®les? (o/N): ").lower().strip()
        if recreate not in ['o', 'oui', 'y', 'yes']:
            print("‚è≠  Utilisation des mod√®les existants")
            print()
            return True
    
    print(" Ex√©cution du script de cr√©ation des mod√®les...")
    
    try:
        # Ex√©cuter create_models_manual.py
        result = subprocess.run([sys.executable, "create_models_manual.py"], 
                              capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print(" Mod√®les cr√©√©s avec succ√®s!")
            print(result.stdout)
        else:
            print("  Avertissement lors de la cr√©ation des mod√®les:")
            print(result.stderr)
            print(" Utilisation du mode d√©monstration...")
    
    except subprocess.TimeoutExpired:
        print(" Timeout lors de la cr√©ation - utilisation du mode d√©mo")
    except FileNotFoundError:
        print(" Script create_models_manual.py non trouv√© - utilisation du mode d√©mo")
    except Exception as e:
        print(f"  Erreur: {e} - utilisation du mode d√©mo")
    
    print()
    return True

def configure_streamlit():
    """Configurer Streamlit"""
    print(" Configuration de l'interface Streamlit...")
    
    # Cr√©er le fichier de config si n√©cessaire
    config_path = Path(".streamlit/config.toml")
    if not config_path.exists():
        config_content = """[server]
maxUploadSize = 200
maxMessageSize = 200
headless = true

[theme]
primaryColor = "#1DB954"
backgroundColor = "#121212" 
secondaryBackgroundColor = "#282828"
textColor = "#FFFFFF"
font = "sans serif"

[browser]
gatherUsageStats = false

[global]
developmentMode = false
"""
        
        with open(config_path, "w") as f:
            f.write(config_content)
        print("‚úÖ Configuration Streamlit cr√©√©e")
    else:
        print("‚úÖ Configuration Streamlit existante")
    
    print()
    return True

def launch_application():
    """Lancer l'application"""
    print(" Lancement de l'application premium...")
    
    app_file = "app/streamlit_app_premium.py"
    
    if not Path(app_file).exists():
        print(f" Application non trouv√©e: {app_file}")
        
        # Fallback vers la version standard
        fallback_file = "app/streamlit_app_deployment.py"
        if Path(fallback_file).exists():
            print(f" Utilisation de la version standard: {fallback_file}")
            app_file = fallback_file
        else:
            print(" Aucune application trouv√©e!")
            return False
    
    print(f" Ouverture de {app_file}...")
    print(" L'application va s'ouvrir dans votre navigateur...")
    print()
    print("=" * 60)
    print(" APPLICATION MUSIC RECOMMENDER AI PR√äTE!")
    print("=" * 60)
    print(" Dashboard Analytics - Mode Exploration - Playlist Builder")
    print(" Syst√®me de Rating - Feedback - Export CSV")
    print(" Performance optimis√©e pour d√©ploiement cloud")
    print("=" * 60)
    print()
    print(" CONSEILS POUR LE PORTFOLIO:")
    print("   ‚Ä¢ Testez toutes les fonctionnalit√©s")
    print("   ‚Ä¢ Cr√©ez quelques playlists d√©mo") 
    print("   ‚Ä¢ Explorez le dashboard analytics")
    print("   ‚Ä¢ Notez des recommandations")
    print("   ‚Ä¢ Capturez des screenshots pour portfolio")
    print()
    print(" Pour arr√™ter l'application: Ctrl+C")
    print("=" * 60)
    
    try:
        # Lancer Streamlit
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", app_file,
            "--server.headless", "true",
            "--server.port", "8501",
            "--browser.gatherUsageStats", "false"
        ])
    except KeyboardInterrupt:
        print("\n\n Application arr√™t√©e par l'utilisateur")
    except Exception as e:
        print(f"\n Erreur lors du lancement: {e}")
        return False
    
    return True

def show_deployment_info():
    """Afficher les informations de d√©ploiement"""
    print("\n INFORMATIONS DE D√âPLOIEMENT")
    print("=" * 40)
    
    print(" Pour d√©ployer sur Streamlit Cloud:")
    print("   1. Commitez tous les fichiers sur GitHub")
    print("   2. Allez sur share.streamlit.io") 
    print("   3. Connectez votre repository")
    print("   4. Fichier principal: app/streamlit_app_premium.py")
    print("   5. Branch: main")
    
    print("\n Fichiers cr√©√©s pour le d√©ploiement:")
    files_created = [
        " app/streamlit_app_premium.py (Application compl√®te)",
        " .streamlit/config.toml (Configuration)",
        " data/processed/ (Mod√®les et donn√©es)",
        " create_models_manual.py (Script de setup)",
        " DEPLOYMENT_GUIDE.md (Guide d√©taill√©)"
    ]
    
    for file_info in files_created:
        print(f"   {file_info}")
    
    print("\n FONCTIONNALIT√âS PREMIUM INCLUSES:")
    features = [
        " Dashboard Analytics avec KPIs temps r√©el",
        " Mode Exploration Intelligent (humeur, √©poque)",
        " Syst√®me de Rating et Feedback utilisateur",
        " Playlist Builder avec export et analyse",
        " Interface premium avec th√®me Spotify",
        " Visualisations Plotly interactives",
        " Comparaison d'algorithmes avanc√©e",
        " Export CSV et partage social (simul√©)"
    ]
    
    for feature in features:
        print(f"   {feature}")
    
    print("\n Votre application est maintenant pr√™te pour impressionner dans votre portfolio!")

def main():
    """Fonction principale"""
    print_header()
    
    # √âtapes de configuration
    steps = [
        (" V√©rification des pr√©requis", check_requirements),
        (" Configuration de l'environnement", setup_environment), 
        (" Cr√©ation des mod√®les IA", create_models),
        (" Configuration Streamlit", configure_streamlit)
    ]
    
    # Ex√©cuter chaque √©tape
    for step_name, step_func in steps:
        print(f" {step_name}")
        try:
            success = step_func()
            if not success:
                print(f" √âchec: {step_name}")
                print(" Arr√™t du processus de lancement")
                return 1
        except Exception as e:
            print(f" Erreur lors de {step_name}: {e}")
            print(" Tentative de continuation...")
        
        time.sleep(0.5)  # Pause pour la lisibilit√©
    
    print(" Configuration termin√©e avec succ√®s!")
    print()
    
    # Demander si l'utilisateur veut lancer maintenant
    launch_now = input(" Lancer l'application maintenant? (O/n): ").lower().strip()
    
    if launch_now in ['', 'o', 'oui', 'y', 'yes']:
        success = launch_application()
        if not success:
            return 1
    else:
        print("  Application configur√©e mais non lanc√©e")
        print(" Pour lancer manuellement: streamlit run app/streamlit_app_premium.py")
    
    show_deployment_info()
    
    print("\n Mission accomplie! Votre Music Recommender AI est pr√™t pour le portfolio!")
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n Processus interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n Erreur critique: {e}")
        sys.exit(1)